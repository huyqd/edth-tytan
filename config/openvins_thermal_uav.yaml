#=============================================================================
# OpenVINS Configuration for Thermal UAV Video Stabilization
#=============================================================================
# This configuration is optimized for:
# - Low-contrast thermal imagery (requires enhanced feature detection)
# - Consumer-grade IMU with moderate noise
# - Online calibration of time offset and camera-IMU extrinsics
# - Real-time operation on UAV platforms
#=============================================================================

#=============================================================================
# ESTIMATOR CONFIGURATION
#=============================================================================

# Subsystem flags
use_fej: true                  # First-estimate Jacobians (improves consistency)
use_imuavg: true               # Average IMU measurements between camera frames
use_rk4int: true               # RK4 integration (more accurate than Euler)
use_stereo: false              # Single camera (monocular)

# Online calibration flags - CRITICAL FOR SUCCESS
calib_cam_extrinsics: true     # Enable online extrinsic calibration (spatial offset)
calib_cam_intrinsics: false    # Keep intrinsics fixed (calibrate offline with Kalibr)
calib_cam_timeoffset: true     # Enable online time offset calibration (temporal offset)
calib_camimu_dt: true          # Alternative name for time offset calibration

# State vector configuration
max_clones: 11                 # Sliding window size (11 frames ~= 0.37s at 30Hz)
max_slam: 50                   # Max SLAM features (can set to 0 to disable SLAM for speed)
max_slam_in_update: 25         # SLAM features per update
max_msckf_in_update: 40        # MSCKF features per update
max_cameras: 1                 # Number of cameras

dt_slam_delay: 1               # Delay before initializing SLAM features (seconds)

# Initialization settings
init_window_time: 2.0          # Initialization window duration (seconds)
init_imu_thresh: 1.5           # Minimum IMU excitation for initialization (rad/s)
                               # Requires some rotation to initialize properly

# Zero velocity update (for ground robots, disable for UAVs)
try_zupt: false                # Don't use zero-velocity updates (UAV is always moving)
zupt_chi2_multipler: 0         # Disabled
zupt_max_velocity: 0.1         # Disabled
zupt_noise_multiplier: 1       # Disabled
zupt_max_disparity: 0.5        # Disabled

# Measurement noise
up_msckf_sigma_px: 1.0         # MSCKF feature measurement noise (pixels)
up_msckf_chi2_multipler: 1.0   # Chi-squared test multiplier for outlier rejection
up_slam_sigma_px: 1.0          # SLAM feature measurement noise (pixels)
up_slam_chi2_multipler: 1.0    # Chi-squared test multiplier for outlier rejection

#=============================================================================
# INITIALIZATION CONFIGURATION
#=============================================================================

# Dynamic initialization using IMU measurements
init_dyna_use: true                  # Use dynamic initialization (recommended)
init_dyna_mle_opt_calib: false       # Don't optimize calibration in initialization (do it online)
init_dyna_mle_max_iter: 50           # Max iterations for MLE optimization
init_dyna_mle_max_time: 0.05         # Max time per iteration (seconds)
init_dyna_mle_max_threads: 6         # Parallel threads for optimization
init_dyna_num_pose: 6                # Number of poses to use for initialization
init_dyna_min_deg: 10.0              # Minimum rotation for initialization (degrees)

# Static initialization (not recommended for UAVs)
init_static_use: false

#=============================================================================
# CAMERA CONFIGURATION
#=============================================================================
# NOTE: Replace these values with your actual camera calibration!

cam0:
  # Camera model: "pinhole" for standard perspective cameras
  camera_model: "pinhole"

  # Distortion model: "radtan" (radial-tangential), "equidistant", or "fov"
  distortion_model: "radtan"

  # Extrinsics: Transformation from IMU to camera (T_C_I)
  # Format: 4x4 transformation matrix [R | t; 0 0 0 1]
  # WHERE TO GET THIS:
  # - Option 1: Measure physically (translation from IMU to camera in body frame)
  # - Option 2: Calibrate offline with Kalibr (most accurate)
  # - Option 3: Rough estimate + online refinement (enable calib_cam_extrinsics)
  #
  # Example: Camera is 20cm forward, 5cm right, 10cm down from IMU
  T_imu_cam:
    - [1.0000,  0.0000,  0.0000,  0.20]   # [R00, R01, R02, tx]
    - [0.0000,  1.0000,  0.0000,  0.05]   # [R10, R11, R12, ty]
    - [0.0000,  0.0000,  1.0000, -0.10]   # [R20, R21, R22, tz]
    - [0.0000,  0.0000,  0.0000,  1.00]   # [  0,   0,   0,  1]

  # Intrinsics: [width, height, fx, fy, cx, cy, k1, k2, p1, p2]
  # WHERE TO GET THIS:
  # - Calibrate with checkerboard using OpenCV, Kalibr, or MATLAB
  # - fx, fy: focal lengths (pixels)
  # - cx, cy: principal point (image center, usually ~width/2, ~height/2)
  # - k1, k2: radial distortion coefficients
  # - p1, p2: tangential distortion coefficients
  #
  # PLACEHOLDER VALUES - REPLACE WITH ACTUAL CALIBRATION!
  intrinsics:
    - 640        # width (pixels)
    - 512        # height (pixels)
    - 400.0      # fx (focal length x) - REPLACE!
    - 400.0      # fy (focal length y) - REPLACE!
    - 320.0      # cx (principal point x) - usually ~width/2
    - 256.0      # cy (principal point y) - usually ~height/2
    - 0.0        # k1 (radial distortion)
    - 0.0        # k2 (radial distortion)
    - 0.0        # p1 (tangential distortion)
    - 0.0        # p2 (tangential distortion)

  # Time offset between camera and IMU clocks (seconds)
  # Positive: camera timestamp is ahead of IMU
  # Negative: camera timestamp is behind IMU
  # This will be estimated online if calib_cam_timeoffset is true
  timeshift_cam_imu: 0.0

#=============================================================================
# FEATURE TRACKER CONFIGURATION (Optimized for Thermal Imagery)
#=============================================================================

# Feature extraction parameters
num_pts: 150                   # Target number of features to track (reduced for thermal)
                               # Standard: 200-250, Thermal: 100-150

# Feature detection
use_klt: true                  # Use KLT (Lucas-Kanade) tracker
fast_threshold: 8              # FAST corner detection threshold
                               # CRITICAL: Lower for thermal (standard: 15-20, thermal: 5-10)
                               # Lower = more features but lower quality

grid_x: 5                      # Grid cells for feature distribution (horizontal)
grid_y: 4                      # Grid cells for feature distribution (vertical)
min_px_dist: 15                # Minimum distance between features (pixels)

# KLT tracker parameters
knn_ratio: 0.70                # Lowe's ratio test for feature matching (0.7-0.8)
pyr_levels: 3                  # Pyramid levels for multi-scale tracking
win_size: 15                   # KLT window size (pixels)

# Downsample images before processing (for speed)
downsample_cameras: false      # Set true if images are very high resolution
downsize_width: 640            # Target width after downsampling
downsize_height: 512           # Target height after downsampling

# Multi-threading
num_opencv_threads: 4          # OpenCV parallel threads for feature detection
histogram_method: "HISTOGRAM"  # Histogram equalization method
                               # Options: "NONE", "HISTOGRAM", "CLAHE"
                               # CRITICAL: Use "CLAHE" for thermal imagery!

# Feature matching
multi_threading: true          # Enable multi-threading for performance
use_stereo: false              # Monocular (single camera)

#=============================================================================
# IMU NOISE PARAMETERS
#=============================================================================
# CRITICAL: These values significantly affect VIO accuracy!
#
# HOW TO GET PROPER VALUES:
# 1. Collect 1-10 hours of static IMU data (drone on ground, not moving)
# 2. Run Allan variance analysis (use allantools library)
# 3. Extract noise parameters from Allan deviation curves
#
# VALUES BELOW ARE PLACEHOLDERS for consumer-grade MEMS IMU
# (e.g., MPU-6000, ICM-20948, BMI160)
#
# REPLACE WITH YOUR ACTUAL VALUES!
#=============================================================================

imu_config:
  # Continuous-time "white noise" spectral density
  # Gyroscope: rad/s/√Hz
  # Accelerometer: m/s²/√Hz
  sigma_w: 1.6968e-04          # Gyroscope white noise
  sigma_a: 2.0000e-03          # Accelerometer white noise

  # Continuous-time "random walk" spectral density
  # Gyroscope: rad/s²/√Hz
  # Accelerometer: m/s³/√Hz
  sigma_wb: 1.9393e-05         # Gyroscope bias random walk
  sigma_ab: 3.0000e-03         # Accelerometer bias random walk

  # Initial IMU covariance (for state initialization)
  sigma_w_2: 1.6968e-04
  sigma_a_2: 2.0000e-03
  sigma_wb_2: 1.9393e-05
  sigma_ab_2: 3.0000e-03

  # Update rate (Hz)
  # NOTE: This should match your IMU data rate
  imu_rate: 200                # Typical: 100-400 Hz

#=============================================================================
# GRAVITY CONFIGURATION
#=============================================================================

# Gravity magnitude (m/s²)
# Varies slightly with latitude and altitude
# Sea level: ~9.81 m/s²
# High altitude: slightly less (e.g., 9.79 at 2000m)
gravity_mag: 9.81

#=============================================================================
# RECORDING AND DEBUGGING
#=============================================================================

# Save trajectory to file
save_trajectory: true
filepath_traj: "traj_estimate.txt"   # Format: timestamp x y z qx qy qz qw

# Save calibration estimates to file
save_calibration: true
filepath_calib: "calib_estimate.txt"  # Time offset and extrinsics over time

# Save state estimates (full state vector)
save_state: false                     # Disable for speed (large files)
filepath_state: "state_estimate.txt"

# Save tracked features (for debugging)
save_features: false                  # Disable for speed
filepath_features: "features.txt"

# Save timing statistics
save_timing: true
filepath_timing: "timing.txt"

# Verbose output
verbosity: "INFO"                     # Options: "ALL", "DEBUG", "INFO", "WARNING", "ERROR", "SILENT"

#=============================================================================
# PERFORMANCE TUNING
#=============================================================================

# Maximum frequency to process images (Hz)
# Set lower if VIO can't keep up with camera rate
max_camera_freq: 30.0         # Process every frame at 30 FPS

# Number of threads for parallelization
num_opencv_threads: 4         # Feature detection threads
num_pts_per_thread: 50        # Features per thread

#=============================================================================
# ADVANCED OPTIONS (Leave as default for MVP)
#=============================================================================

# MSCKF features (multi-state constraint Kalman filter)
fi_max_dist: 100              # Max distance for triangulation (meters)
fi_min_dist: 0.1              # Min distance for triangulation (meters)
fi_max_baseline: 100          # Max baseline for triangulation (meters)
fi_max_cond_number: 10000     # Max condition number for triangulation

# Chi-squared outlier rejection
outlier_method: 1             # 0=None, 1=RANSAC, 2=M-estimator
chi2_mult: 1.0                # Chi-squared multiplier (lower = stricter)

# Mahalanobis distance gating
gate_distance: 3.0            # Mahalanobis distance threshold (sigma)

#=============================================================================
# NOTES AND REMINDERS
#=============================================================================
#
# BEFORE RUNNING:
# 1. Replace camera intrinsics with actual calibration values!
# 2. Replace IMU noise parameters with values from Allan variance!
# 3. Measure or estimate camera-IMU extrinsic transformation!
# 4. Verify image dimensions match your dataset!
# 5. Preprocess thermal images with CLAHE before feeding to VIO!
#
# VALIDATION CHECKLIST:
# - Time offset converges: final std < 1ms
# - Extrinsics reasonable: translation 0.1-0.5m
# - Feature count: mean > 50 features/frame
# - Trajectory plausible: no NaN, speeds < 30 m/s for UAV
# - Reprojection error: mean < 2 pixels
#
# TROUBLESHOOTING:
# - VIO won't initialize → Check motion (need rotation + translation)
# - Low feature count → Lower fast_threshold to 5, use CLAHE preprocessing
# - Trajectory diverges → Check time offset, extrinsics, IMU noise params
# - Scale wrong (100x off) → IMU noise parameters likely incorrect
#
#=============================================================================
